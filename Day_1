/*
Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

You can return the answer in any order.

Example 1:

Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].

*/



class Solution {
    public int[] twoSum(int[] nums, int target) {
        for(int i=0;i<nums.length;i++)
        {
            for(int j=i+1;j<nums.length;j++)
            {
                if(nums[j]==target-nums[i])
                {
                    return new int[] {i,j};
                }
            }
        }
        return null;
    }
}










Problem 2:- ADD TWO NUMBER

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *    int val;
 *   ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        
        ListNode result = new ListNode(0);
        ListNode ptr=result;
        int carry =0;

        while(l1!=null || l2!=null)
        {
         int sum=0+carry;

         if(l1 !=null)
         {
          sum +=l1.val;
          l1=l1.next;
         }
         if(l2 !=null)
         {
            sum += l2.val;
            l2=l2.next;
         }
        carry = sum/10;
        sum = sum%10;

        ptr.next= new ListNode(sum);
        ptr=ptr.next;
        }
        if(carry==1)
        {
     ptr.next=new ListNode(1);
        }
return result.next;
    }
}









